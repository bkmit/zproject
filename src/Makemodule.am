################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
program_libs =  ${project_libs}

# Programs need to link the c++ runtime if everything was compiled statically.
if !ENABLE_SHARED
program_libs += -lstdc++ -lm
endif

# Install data into /usr/local/bin
dist_bin_SCRIPTS = \
    zproject.gsl \
    zproject_projects.gsl \
    zproject_class_api.gsl \
    zproject_skeletons.gsl \
    zproject_bench.gsl \
    zproject_class.gsl \
    zproject_git.gsl \
    zproject_valgrind.gsl \
    zproject_android.gsl \
    zproject_autotools.gsl \
    zproject_cmake.gsl \
    zproject_cygwin.gsl \
    zproject_debian.gsl \
    zproject_docker.gsl \
    zproject_gyp.gsl \
    zproject_java.gsl \
    zproject_java_lib.gsl \
    zproject_java_msvc.gsl \
    zproject_lua_ffi.gsl \
    zproject_mingw32.gsl \
    zproject_nodejs.gsl \
    zproject_nuget.gsl \
    zproject_obs.gsl \
    zproject_python.gsl \
    zproject_python_cffi.gsl \
    zproject_qml.gsl \
    zproject_qt.gsl \
    zproject_redhat.gsl \
    zproject_rpi.gsl \
    zproject_ruby.gsl \
    zproject_systemd.gsl \
    zproject_travis.gsl \
    zproject_vagrant.gsl \
    zproject_vs2008.gsl \
    zproject_vs20xx.gsl \
    zproject_vs20xx_props.gsl \
    zproject_known_projects.xml \
    mkapi.py \
    fake_cpp


# Directories with test fixtures optionally provided by the project,
# and with volatile RW data possibly created by a selftest program.
# It is up to the project authors to populate the RO directory with
# filenames called from the selftest methods, if any. They will be
# EXTRA_DISTed by the recipes generated with with zproject, however,
# and copied into builddir (if different from srcdir) to simplify
# the "distcheck" and similar tests (so selftest can use same paths).
# Note that the RO directory must exist to fulfill EXTRA_DIST, so we
# add a stub file that can be committed to SCM by project developers.
# The RW directory will be automatically wiped by "make distclean".
SELFTEST_DIR_RO = src/selftest-ro
SELFTEST_DIR_RW = src/selftest-rw

$(abs_top_builddir)/$(SELFTEST_DIR_RW):
	mkdir -p "$@"

$(abs_top_builddir)/$(SELFTEST_DIR_RO): $(abs_top_srcdir)/$(SELFTEST_DIR_RO)
	@if test "$@" != "$<" ; then \
		echo "    COPYDIR  $(SELFTEST_DIR_RO)"; \
		rm -rf "$@"; \
		cp -r "$<" "$@" ; \
		fi

CLEANFILES += $(abs_top_builddir)/$(SELFTEST_DIR_RW)/*

# Note that this syntax dists the whole directory - including subdirs (if any)
EXTRA_DIST += $(SELFTEST_DIR_RO)

clean-local: clean-local-selftest-ro clean-local-selftest-rw
.PHONY: clean-local-selftest-ro
clean-local-selftest-ro:
	@if test "$(abs_top_builddir)" != "$(abs_top_srcdir)" ; then \
		if test -d "$(abs_top_builddir)/$(SELFTEST_DIR_RO)" ; then \
			chmod -R u+w "$(abs_top_builddir)/$(SELFTEST_DIR_RO)" ; \
			rm -rf "$(abs_top_builddir)/$(SELFTEST_DIR_RO)" ; \
		fi; \
	fi

# Unlike CLEANFILES setting above, this one whould also wipe created subdirs
.PHONY: clean-local-selftest-rw
clean-local-selftest-rw:
	@if test "$(abs_top_builddir)" != "$(abs_top_srcdir)" ; then \
		if test -d "$(abs_top_builddir)/$(SELFTEST_DIR_RW)" ; then \
			chmod -R u+w "$(abs_top_builddir)/$(SELFTEST_DIR_RW)" ; \
			rm -rf "$(abs_top_builddir)/$(SELFTEST_DIR_RW)" ; \
		fi; \
	fi

check-local: src/zproject_selftest $(abs_top_builddir)/$(SELFTEST_DIR_RW) $(abs_top_builddir)/$(SELFTEST_DIR_RO)
	$(LIBTOOL) --mode=execute $(builddir)/src/zproject_selftest

check-verbose: src/zproject_selftest $(abs_top_builddir)/$(SELFTEST_DIR_RW) $(abs_top_builddir)/$(SELFTEST_DIR_RO)
	$(LIBTOOL) --mode=execute $(builddir)/src/zproject_selftest -v

# Run the selftest binary under valgrind to check for memory leaks
memcheck: src/zproject_selftest $(abs_top_builddir)/$(SELFTEST_DIR_RW) $(abs_top_builddir)/$(SELFTEST_DIR_RO)
	$(LIBTOOL) --mode=execute valgrind --tool=memcheck \
		--leak-check=full --show-reachable=yes --error-exitcode=1 \
		--suppressions=$(srcdir)/src/.valgrind.supp \
		$(builddir)/src/zproject_selftest

# Run the selftest binary under valgrind to check for performance leaks
callcheck: src/zproject_selftest $(abs_top_builddir)/$(SELFTEST_DIR_RW) $(abs_top_builddir)/$(SELFTEST_DIR_RO)
	$(LIBTOOL) --mode=execute valgrind --tool=callgrind \
		$(builddir)/src/zproject_selftest

# Run the selftest binary under gdb for debugging
debug: src/zproject_selftest $(abs_top_builddir)/$(SELFTEST_DIR_RW) $(abs_top_builddir)/$(SELFTEST_DIR_RO)
	$(LIBTOOL) --mode=execute gdb -q \
		$(builddir)/src/zproject_selftest

# Run the selftest binary with verbose switch for tracing
animate: src/zproject_selftest $(abs_top_builddir)/$(SELFTEST_DIR_RW) $(abs_top_builddir)/$(SELFTEST_DIR_RO)
	$(LIBTOOL) --mode=execute $(builddir)/src/zproject_selftest -v

if WITH_GCOV
coverage: src/zproject_selftest $(abs_top_builddir)/$(SELFTEST_DIR_RW) $(abs_top_builddir)/$(SELFTEST_DIR_RO)
	@echo "you had called configure --with-gcov"
	lcov --base-directory . --directory . --zerocounters -q
	$(MAKE) check
	lcov --base-directory . --directory . --capture -o coverage.info
	lcov --remove coverage.info "/usr*" -o coverage.info
	lcov --remove coverage.info "zproject_selftest.c" -o coverage.info
	$(RM) -rf coverage/*
	genhtml -o coverage/ -t "zproject test coverage" --num-spaces 4 coverage.info
else
coverage: src/zproject_selftest
	@echo "call make clean && configure --with-gcov to enable code coverage"
	@exit 1
endif

################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
